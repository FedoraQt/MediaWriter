name: release

on:
  release:
    types: [ created ]

env:
    QT_VERSION: '6.9.3'

jobs:
  macOS:
    strategy:
      matrix:
        arch: [x86_64, arm64]
        include:
          - arch: x86_64
            runner: macos-15
            dmg_arch_suffix: ""
          - arch: arm64
            runner: macos-15
            dmg_arch_suffix: "-arm64"
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - name: Set env (TAG_NAME)
        run: echo "TAG_NAME=$(bash ./dist/get-tag-name.sh)" >> $GITHUB_ENV

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{env.QT_VERSION}}
          modules: qtimageformats
          cache: true
          cache-key-prefix: ${{ github.job }}-${{ matrix.arch }}-qt

      - name: Build
        run: |
          set -eo pipefail
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --parallel

      - name: Bundle
        run: |
          set -eo pipefail
          "$QT_ROOT_DIR"/bin/macdeployqt build/src/app/FedoraMediaWriter.app -qmldir=src/app/qml -executable=build/src/app/FedoraMediaWriter.app/Contents/MacOS/helper
          # No idea why but macdeployqt deploys debug libs too, just remove them, maybe fix this sometimes
          for i in `find build/src/app/FedoraMediaWriter.app/ -name '*.dSYM'`; do rm -fr "$i"; done
          cd build/src/app/
          "$QT_ROOT_DIR"/bin/macdeployqt FedoraMediaWriter.app -dmg -always-overwrite
          mv FedoraMediaWriter.dmg ../../../FedoraMediaWriter-macos${{ matrix.dmg_arch_suffix }}-${{ env.TAG_NAME }}.dmg

      - name: Upload artifact (for direct download from workflow)
        uses: actions/upload-artifact@v4
        with:
          # Use the dmg_arch_suffix for the artifact name
          name: FedoraMediaWriter-macos${{ matrix.dmg_arch_suffix }}-${{ env.TAG_NAME }}.dmg
          path: FedoraMediaWriter-macos${{ matrix.dmg_arch_suffix }}-${{ env.TAG_NAME }}.dmg

      - name: Upload to GitHub (release)
        run: |
          set -eo pipefail
          # Pass the full filename including the architecture suffix
          bash dist/upload-to-github.sh github_api_token=${{ secrets.GITHUB_TOKEN }} tag="${{ env.TAG_NAME }}" filename="FedoraMediaWriter-macos${{ matrix.dmg_arch_suffix }}-${{ env.TAG_NAME }}.dmg"

  Windows-MSVC:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set env
        run: echo "TAG_NAME=$(bash ./dist/get-tag-name.sh)" >> $env:GITHUB_ENV

      - name: Install dependencies
        shell: bash
        run: |
          choco install nsis
          choco install dos2unix
          choco install cmake

      - name: Set up CPM cache
        id: cache-cpm
        uses: actions/cache@v4
        with:
          path: ~/cpm-cache
          key: ${{ runner.os }}-cpm-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cpm-

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{env.QT_VERSION}}
          arch: win64_msvc2022_64
          cache: true
          cache-key-prefix: ${{ github.job }}-qt

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Build xz-utils
        shell: bash
        if: ${{ !steps.cache-qt.outputs.cache-hit }}
        run: |
          eval "$(./dist/win/make-vs2022-env.bat)"
          git clone https://git.tukaani.org/xz.git
          cd xz
          git checkout v5.4.5
          sed -i 's/#include "config.h"//' src/common/common_w32res.rc
          sed -i 's/PACKAGE_NAME/"liblzma"/' src/common/common_w32res.rc
          sed -i 's/PACKAGE_URL/"https:\/\/tukaani.org\/xz\/"/' src/common/common_w32res.rc
          mkdir build
          cd build
          export CPM_SOURCE_CACHE=~/cpm-cache
          export CMAKE_PREFIX_PATH="$QT_ROOT_DIR"/lib/cmake
          "/c/Program Files/CMake/bin/cmake.exe" .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$QT_ROOT_DIR" -DBUILD_SHARED_LIBS=ON
          "/c/Program Files/CMake/bin/cmake.exe" --build . --config Release
          "/c/Program Files/CMake/bin/cmake.exe" --install . --config Release

      - name: Build MediaWriter
        shell: bash
        run: |
          eval "$(./dist/win/make-vs2022-env.bat)"
          mkdir build
          cd build
          export CPM_SOURCE_CACHE=~/cpm-cache
          export CMAKE_PREFIX_PATH="$QT_ROOT_DIR"/lib/cmake
          "/c/Program Files/CMake/bin/cmake.exe" .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$QT_ROOT_DIR"
          "/c/Program Files/CMake/bin/cmake.exe" --build . --config Release
          "/c/Program Files/CMake/bin/cmake.exe" --install . --config Release

      - name: Windeployqt
        shell: bash
        run: |
          mkdir -p build/app/release
          cd build/app/release
          mv ../../src/app/helper.exe .
          mv ../../src/app/mediawriter.exe .
          cp $QT_ROOT_DIR/bin/liblzma.dll .
          $QT_ROOT_DIR/bin/windeployqt.exe mediawriter.exe helper.exe liblzma.dll --verbose 2 --qmldir ../../.. --compiler-runtime --release
          find . -type d -not -path '*/\.*' | sed 's/^\.\///g' | sed 's@\/@\\@g' | grep -v "^.$" > uninstall.log
          find . -type f -not -path '*/\.*' | sed 's/^\.\///g' | sed 's@\/@\\@g' | sort >> uninstall.log

      - name: Installer
        shell: bash
        run: |
          VERSION_STRIPPED=$(sed "s/-.*//" <<< "${{ env.TAG_NAME }}")
          if [[ "$VERSION_STRIPPED" == "" ]]; then
              VERSION_STRIPPED=5.2.9
          fi
          VERSION_MAJOR=$(cut -d. -f1 <<< "${VERSION_STRIPPED}")
          VERSION_MINOR=$(cut -d. -f2 <<< "${VERSION_STRIPPED}")
          VERSION_BUILD=$(cut -d. -f3 <<< "${VERSION_STRIPPED}")
          INSTALLED_SIZE=$(du -k -d0 "build/app/release" | cut -f1)

          cp "dist/win/mediawriter_native.nsi" "dist/win/mediawriter_native.tmp.nsi"

          sed -i "s/#!define VERSIONMAJOR/!define VERSIONMAJOR ${VERSION_MAJOR}/" "dist/win/mediawriter_native.tmp.nsi"
          sed -i "s/#!define VERSIONMINOR/!define VERSIONMINOR ${VERSION_MINOR}/" "dist/win/mediawriter_native.tmp.nsi"
          sed -i "s/#!define VERSIONBUILD/!define VERSIONBUILD ${VERSION_BUILD}/" "dist/win/mediawriter_native.tmp.nsi"
          sed -i "s/#!define INSTALLSIZE/!define INSTALLSIZE ${INSTALLED_SIZE}/" "dist/win/mediawriter_native.tmp.nsi"

          unix2dos < "LICENSE.GPL-2" > "build/app/release/LICENSE.GPL-2.txt"
          unix2dos < "LICENSE.LGPL-2" > "build/app/release/LICENSE.LGPL-2.txt"

          echo "LICENSE.GPL-2.txt" >> build/app/release/uninstall.log
          echo "LICENSE.LGPL-2.txt" >> build/app/release/uninstall.log

          "/c/Program Files (x86)/NSIS/makensis.exe" -DCERTPATH="" -DCERTPASS="" dist/win/mediawriter_native.tmp.nsi
          mv dist/win/FMW-setup.exe ./"FedoraMediaWriter-win64-${{ env.TAG_NAME }}.exe"

      - name: Upload to GitHub (release)
        run: |
          bash dist/upload-to-github.sh github_api_token=${{ secrets.GITHUB_TOKEN }} tag="${{ env.TAG_NAME }}" filename="FedoraMediaWriter-win64-${{ env.TAG_NAME }}.exe"

      - name: Publish to WinGet
        uses: vedantmgoyal9/winget-releaser@main
        with:
          identifier: Fedora.FedoraMediaWriter
          version: ${{ env.TAG_NAME }}
          token: ${{ secrets.WINGET_TOKEN }}
